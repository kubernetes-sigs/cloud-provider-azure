// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by client-gen. DO NOT EDIT.
package natgatewayclient

import (
	"context"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	armnetwork "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v6"
	"github.com/onsi/gomega"
)

func init() {
	beforeAllFunc = func(ctx context.Context) {
		// Create a public IP for the NAT Gateway
		networkClientOption := clientOption
		networkClientOption.Telemetry.ApplicationID = "ccm-pip-client"
		
		networkClientFactory, err := armnetwork.NewClientFactory(recorder.SubscriptionID(), recorder.TokenCredential(), &arm.ClientOptions{
			ClientOptions: networkClientOption,
		})
		gomega.Expect(err).NotTo(gomega.HaveOccurred())
		
		publicIPClient := networkClientFactory.NewPublicIPAddressesClient()
		
		// Create public IP with Standard SKU for NAT Gateway
		pipPoller, err := publicIPClient.BeginCreateOrUpdate(ctx, resourceGroupName, "pip1", armnetwork.PublicIPAddress{
			Location: to.Ptr(location),
			Properties: &armnetwork.PublicIPAddressPropertiesFormat{
				PublicIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodStatic),
			},
			SKU: &armnetwork.PublicIPAddressSKU{
				Name: to.Ptr(armnetwork.PublicIPAddressSKUNameStandard),
				Tier: to.Ptr(armnetwork.PublicIPAddressSKUTierRegional),
			},
		}, nil)
		gomega.Expect(err).NotTo(gomega.HaveOccurred())
		
		pipResp, err := pipPoller.PollUntilDone(ctx, &runtime.PollUntilDoneOptions{
			Frequency: 1 * time.Second,
		})
		gomega.Expect(err).NotTo(gomega.HaveOccurred())
		
		// Initialize the NAT Gateway resource with required fields
		newResource = &armnetwork.NatGateway{
			Location: to.Ptr(location),
			Properties: &armnetwork.NatGatewayPropertiesFormat{
				PublicIPAddresses: []*armnetwork.SubResource{
					{
						ID: pipResp.PublicIPAddress.ID,
					},
				},
			},
			SKU: &armnetwork.NatGatewaySKU{
				Name: to.Ptr(armnetwork.NatGatewaySKUNameStandard),
			},
		}
	}
	
	afterAllFunc = func(ctx context.Context) {
		// Clean up the public IP after NAT Gateway is deleted
		networkClientOption := clientOption
		networkClientOption.Telemetry.ApplicationID = "ccm-pip-client"
		
		networkClientFactory, err := armnetwork.NewClientFactory(recorder.SubscriptionID(), recorder.TokenCredential(), &arm.ClientOptions{
			ClientOptions: networkClientOption,
		})
		if err != nil {
			return // Don't fail cleanup
		}
		
		publicIPClient := networkClientFactory.NewPublicIPAddressesClient()
		pipPoller, err := publicIPClient.BeginDelete(ctx, resourceGroupName, "pip1", nil)
		if err != nil {
			return // Don't fail cleanup
		}
		
		_, _ = pipPoller.PollUntilDone(ctx, &runtime.PollUntilDoneOptions{
			Frequency: 1 * time.Second,
		})
	}
}