// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: fileservice_repo.go
//
// Generated by this command:
//
//	mockgen -package mock_fileservice -source fileservice_repo.go -typed -copyright_file ../../../../hack/boilerplate/boilerplate.generatego.txt
//

// Package mock_fileservice is a generated GoMock package.
package mock_fileservice

import (
	context "context"
	reflect "reflect"

	armstorage "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, subsID, resourceGroup, account string) (*armstorage.FileServiceProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, subsID, resourceGroup, account)
	ret0, _ := ret[0].(*armstorage.FileServiceProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, subsID, resourceGroup, account any) *MockRepositoryGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, subsID, resourceGroup, account)
	return &MockRepositoryGetCall{Call: call}
}

// MockRepositoryGetCall wrap *gomock.Call
type MockRepositoryGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryGetCall) Return(arg0 *armstorage.FileServiceProperties, arg1 error) *MockRepositoryGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryGetCall) Do(f func(context.Context, string, string, string) (*armstorage.FileServiceProperties, error)) *MockRepositoryGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryGetCall) DoAndReturn(f func(context.Context, string, string, string) (*armstorage.FileServiceProperties, error)) *MockRepositoryGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockRepository) Set(ctx context.Context, subsID, resourceGroup, account string, properties *armstorage.FileServiceProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, subsID, resourceGroup, account, properties)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRepositoryMockRecorder) Set(ctx, subsID, resourceGroup, account, properties any) *MockRepositorySetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRepository)(nil).Set), ctx, subsID, resourceGroup, account, properties)
	return &MockRepositorySetCall{Call: call}
}

// MockRepositorySetCall wrap *gomock.Call
type MockRepositorySetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositorySetCall) Return(arg0 error) *MockRepositorySetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositorySetCall) Do(f func(context.Context, string, string, string, *armstorage.FileServiceProperties) error) *MockRepositorySetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositorySetCall) DoAndReturn(f func(context.Context, string, string, string, *armstorage.FileServiceProperties) error) *MockRepositorySetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
