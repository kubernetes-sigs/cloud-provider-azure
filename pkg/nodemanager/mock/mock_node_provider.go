// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: nodemanager.go
//
// Generated by this command:
//
//	mockgen -package mock -source nodemanager.go -self_package sigs.k8s.io/cloud-provider-azure/pkg/node/mock -copyright_file ../../hack/boilerplate/boilerplate.generatego.txt
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	types "k8s.io/apimachinery/pkg/types"
	cloudprovider "k8s.io/cloud-provider"
)

// MockNodeProvider is a mock of NodeProvider interface.
type MockNodeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNodeProviderMockRecorder
}

// MockNodeProviderMockRecorder is the mock recorder for MockNodeProvider.
type MockNodeProviderMockRecorder struct {
	mock *MockNodeProvider
}

// NewMockNodeProvider creates a new mock instance.
func NewMockNodeProvider(ctrl *gomock.Controller) *MockNodeProvider {
	mock := &MockNodeProvider{ctrl: ctrl}
	mock.recorder = &MockNodeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeProvider) EXPECT() *MockNodeProviderMockRecorder {
	return m.recorder
}

// GetPlatformSubFaultDomain mocks base method.
func (m *MockNodeProvider) GetPlatformSubFaultDomain(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformSubFaultDomain", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformSubFaultDomain indicates an expected call of GetPlatformSubFaultDomain.
func (mr *MockNodeProviderMockRecorder) GetPlatformSubFaultDomain(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformSubFaultDomain", reflect.TypeOf((*MockNodeProvider)(nil).GetPlatformSubFaultDomain), ctx)
}

// GetZone mocks base method.
func (m *MockNodeProvider) GetZone(ctx context.Context, name types.NodeName) (cloudprovider.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZone", ctx, name)
	ret0, _ := ret[0].(cloudprovider.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZone indicates an expected call of GetZone.
func (mr *MockNodeProviderMockRecorder) GetZone(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZone", reflect.TypeOf((*MockNodeProvider)(nil).GetZone), ctx, name)
}

// InstanceID mocks base method.
func (m *MockNodeProvider) InstanceID(ctx context.Context, name types.NodeName) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceID", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceID indicates an expected call of InstanceID.
func (mr *MockNodeProviderMockRecorder) InstanceID(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceID", reflect.TypeOf((*MockNodeProvider)(nil).InstanceID), ctx, name)
}

// InstanceType mocks base method.
func (m *MockNodeProvider) InstanceType(ctx context.Context, name types.NodeName) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceType", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceType indicates an expected call of InstanceType.
func (mr *MockNodeProviderMockRecorder) InstanceType(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceType", reflect.TypeOf((*MockNodeProvider)(nil).InstanceType), ctx, name)
}

// NodeAddresses mocks base method.
func (m *MockNodeProvider) NodeAddresses(ctx context.Context, name types.NodeName) ([]v1.NodeAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeAddresses", ctx, name)
	ret0, _ := ret[0].([]v1.NodeAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeAddresses indicates an expected call of NodeAddresses.
func (mr *MockNodeProviderMockRecorder) NodeAddresses(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeAddresses", reflect.TypeOf((*MockNodeProvider)(nil).NodeAddresses), ctx, name)
}
