---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cloud-provider: ${CLOUD_PROVIDER_AZURE_LABEL:=azure}
    cni: calico
    cni-windows: ${CLUSTER_NAME}-calico
    containerd-logger: enabled
    csi-proxy: enabled
    metrics-server: enabled
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: ${CLUSTER_NAME}-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureCluster
    name: ${CLUSTER_NAME}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureCluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  additionalTags:
    buildProvenance: ${BUILD_PROVENANCE}
    creationTimestamp: ${TIMESTAMP}
    jobName: ${JOB_NAME}
  identityRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterIdentity
    name: ${CLUSTER_IDENTITY_NAME}
  location: ${AZURE_LOCATION}
  networkSpec:
    subnets:
    - name: control-plane-subnet
      role: control-plane
    - name: node-subnet
      natGateway:
        name: node-natgateway
      role: node
    vnet:
      name: ${AZURE_VNET_NAME:=${CLUSTER_NAME}-vnet}
  resourceGroup: ${AZURE_RESOURCE_GROUP:=${CLUSTER_NAME}}
  subscriptionID: ${AZURE_SUBSCRIPTION_ID}
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          feature-gates: ${K8S_FEATURE_GATES:-""}
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          allocate-node-cidrs: "false"
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: external
          cluster-name: ${CLUSTER_NAME}
          v: "2"
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
          extraArgs:
            quota-backend-bytes: "8589934592"
      kubernetesVersion: ci/${CI_VERSION}
    diskSetup:
      filesystems:
      - device: /dev/disk/azure/scsi1/lun0
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: etcd_disk
      - device: ephemeral0.1
        filesystem: ext4
        label: ephemeral0
        replaceFS: ntfs
      partitions:
      - device: /dev/disk/azure/scsi1/lun0
        layout: true
        overwrite: false
        tableType: gpt
    files:
    - contentFrom:
        secret:
          key: control-plane-azure.json
          name: ${CLUSTER_NAME}-control-plane-azure-json
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
    - content: |
        #!/bin/bash
        set -o nounset
        set -o pipefail
        set -o errexit
        [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""

        # This test installs release packages or binaries that are a result of the CI and release builds.
        # It runs '... --version' commands to verify that the binaries are correctly installed
        # and finally uninstalls the packages.
        # For the release packages it tests all versions in the support skew.
        LINE_SEPARATOR="*************************************************"
        echo "$$LINE_SEPARATOR"
        CI_VERSION=${CI_VERSION}
        if [[ "$${CI_VERSION}" != "" ]]; then
          CI_DIR=/tmp/k8s-ci
          mkdir -p $$CI_DIR
          declare -a PACKAGES_TO_TEST=("kubectl" "kubelet" "kubeadm")
          declare -a CONTAINERS_TO_TEST=("kube-apiserver" "kube-controller-manager" "kube-proxy" "kube-scheduler")
          CONTAINER_EXT="tar"
          echo "* testing CI version $$CI_VERSION"
          # Check for semver
          if [[ "$${CI_VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION_WITHOUT_PREFIX="${CI_VERSION#v}"
            DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https curl
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
            echo 'deb https://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
            apt-get update
            # replace . with \.
            VERSION_REGEX="${VERSION_WITHOUT_PREFIX//./\\.}"
            PACKAGE_VERSION="$(apt-cache madison kubelet|grep $${VERSION_REGEX}- | head -n1 | cut -d '|' -f 2 | tr -d '[:space:]')"
            for CI_PACKAGE in "$${PACKAGES_TO_TEST[@]}"; do
              echo "* installing package: $$CI_PACKAGE $${PACKAGE_VERSION}"
              DEBIAN_FRONTEND=noninteractive apt-get install -y $$CI_PACKAGE=$$PACKAGE_VERSION
            done
          else
            CI_URL="https://storage.googleapis.com/k8s-release-dev/ci/$${CI_VERSION}/bin/linux/amd64"
            for CI_PACKAGE in "$${PACKAGES_TO_TEST[@]}"; do
              echo "* downloading binary: $$CI_URL/$$CI_PACKAGE"
              wget "$$CI_URL/$$CI_PACKAGE" -nv -O "$$CI_DIR/$$CI_PACKAGE"
              chmod +x "$$CI_DIR/$$CI_PACKAGE"
              mv "$$CI_DIR/$$CI_PACKAGE" "/usr/bin/$$CI_PACKAGE"
            done
            IMAGE_REGISTRY_PREFIX=registry.k8s.io
            for CI_CONTAINER in "$${CONTAINERS_TO_TEST[@]}"; do
              echo "* downloading package: $$CI_URL/$$CI_CONTAINER.$$CONTAINER_EXT"
              wget "$$CI_URL/$$CI_CONTAINER.$$CONTAINER_EXT" -O "$$CI_DIR/$$CI_CONTAINER.$$CONTAINER_EXT"
              $${SUDO} ctr -n k8s.io images import "$$CI_DIR/$$CI_CONTAINER.$$CONTAINER_EXT" || echo "* ignoring expected 'ctr images import' result"
              $${SUDO} ctr -n k8s.io images tag $$IMAGE_REGISTRY_PREFIX/$$CI_CONTAINER-amd64:"$${CI_VERSION//+/_}" $$IMAGE_REGISTRY_PREFIX/$$CI_CONTAINER:"$${CI_VERSION//+/_}"
              $${SUDO} ctr -n k8s.io images tag $$IMAGE_REGISTRY_PREFIX/$$CI_CONTAINER-amd64:"$${CI_VERSION//+/_}" gcr.io/k8s-staging-ci-images/$$CI_CONTAINER:"$${CI_VERSION//+/_}"
            done
          fi
          systemctl restart kubelet
        fi
        echo "* checking binary versions"
        echo "ctr version: " $(ctr version)
        echo "kubeadm version: " $(kubeadm version -o=short)
        echo "kubectl version: " $(kubectl version --client=true)
        echo "kubelet version: " $(kubelet --version)
        echo "$$LINE_SEPARATOR"
      owner: root:root
      path: /tmp/kubeadm-bootstrap.sh
      permissions: "0744"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-provider: external
        name: '{{ ds.meta_data["local_hostname"] }}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-provider: external
        name: '{{ ds.meta_data["local_hostname"] }}'
    mounts:
    - - LABEL=etcd_disk
      - /var/lib/etcddisk
    postKubeadmCommands: []
    preKubeadmCommands:
    - bash -c /tmp/kubeadm-bootstrap.sh
    useExperimentalRetryJoin: true
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureMachineTemplate
      name: ${CLUSTER_NAME}-control-plane
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  template:
    spec:
      identity: UserAssigned
      userAssignedIdentities:
      - providerID: /subscriptions/${AZURE_SUBSCRIPTION_ID}/resourceGroups/${CI_RG}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${USER_IDENTITY}
      dataDisks:
      - diskSizeGB: 256
        lun: 0
        nameSuffix: etcddisk
      image:
        marketplace:
          offer: capi
          publisher: cncf-upstream
          sku: ubuntu-2204-gen1
          version: latest
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      vmSize: ${AZURE_CONTROL_PLANE_MACHINE_TYPE}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachinePool
metadata:
  name: ${CLUSTER_NAME}-mp-0
  namespace: default
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WORKER_MACHINE_COUNT}
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfig
          name: ${CLUSTER_NAME}-mp-0
      clusterName: ${CLUSTER_NAME}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachinePool
        name: ${CLUSTER_NAME}-mp-0
      version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachinePool
metadata:
  name: ${CLUSTER_NAME}-mp-0
  namespace: default
spec:
  identity: UserAssigned
  userAssignedIdentities:
  - providerID: /subscriptions/${AZURE_SUBSCRIPTION_ID}/resourceGroups/${CI_RG}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${USER_IDENTITY}
  location: ${AZURE_LOCATION}
  orchestrationMode: ${ORCHESTRATION_MODE:=Uniform}
  strategy:
    rollingUpdate:
      deletePolicy: Oldest
      maxSurge: 25%
      maxUnavailable: 1
    type: RollingUpdate
  template:
    image:
      marketplace:
        offer: capi
        publisher: cncf-upstream
        sku: ubuntu-2204-gen1
        version: latest
    osDisk:
      diskSizeGB: 30
      managedDisk:
        storageAccountType: Premium_LRS
      osType: Linux
    sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
    vmSize: ${AZURE_NODE_MACHINE_TYPE}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfig
metadata:
  name: ${CLUSTER_NAME}-mp-0
  namespace: default
spec:
  files:
  - content: |
      #!/bin/bash
      set -o nounset
      set -o pipefail
      set -o errexit
      [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""
      # This test installs release packages or binaries that are a result of the CI and release builds.
      # It runs '... --version' commands to verify that the binaries are correctly installed
      # and finally uninstalls the packages.
      # For the release packages it tests all versions in the support skew.
      LINE_SEPARATOR="*************************************************"
      echo "$$LINE_SEPARATOR"
      CI_VERSION=${CI_VERSION}
      if [[ "$${CI_VERSION}" != "" ]]; then
        CI_DIR=/tmp/k8s-ci
        mkdir -p $$CI_DIR
        declare -a PACKAGES_TO_TEST=("kubectl" "kubelet" "kubeadm")
        declare -a CONTAINERS_TO_TEST=("kube-apiserver" "kube-controller-manager" "kube-proxy" "kube-scheduler")
        CONTAINER_EXT="tar"
        echo "* testing CI version $$CI_VERSION"
        # Check for semver
        if [[ "$${CI_VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          VERSION_WITHOUT_PREFIX="${CI_VERSION#v}"
          DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https curl
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
          echo 'deb https://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
          apt-get update
          # replace . with \.
          VERSION_REGEX="${VERSION_WITHOUT_PREFIX//./\\.}"
          PACKAGE_VERSION="$(apt-cache madison kubelet|grep $${VERSION_REGEX}- | head -n1 | cut -d '|' -f 2 | tr -d '[:space:]')"
          for CI_PACKAGE in "$${PACKAGES_TO_TEST[@]}"; do
            echo "* installing package: $$CI_PACKAGE $${PACKAGE_VERSION}"
            DEBIAN_FRONTEND=noninteractive apt-get install -y $$CI_PACKAGE=$$PACKAGE_VERSION
          done
        else
          CI_URL="https://storage.googleapis.com/k8s-release-dev/ci/$${CI_VERSION}/bin/linux/amd64"
          for CI_PACKAGE in "$${PACKAGES_TO_TEST[@]}"; do
            echo "* downloading binary: $$CI_URL/$$CI_PACKAGE"
            wget "$$CI_URL/$$CI_PACKAGE" -nv -O "$$CI_DIR/$$CI_PACKAGE"
            chmod +x "$$CI_DIR/$$CI_PACKAGE"
            mv "$$CI_DIR/$$CI_PACKAGE" "/usr/bin/$$CI_PACKAGE"
          done
          IMAGE_REGISTRY_PREFIX=registry.k8s.io
          for CI_CONTAINER in "$${CONTAINERS_TO_TEST[@]}"; do
            echo "* downloading package: $$CI_URL/$$CI_CONTAINER.$$CONTAINER_EXT"
            wget "$$CI_URL/$$CI_CONTAINER.$$CONTAINER_EXT" -O "$$CI_DIR/$$CI_CONTAINER.$$CONTAINER_EXT"
            $${SUDO} ctr -n k8s.io images import "$$CI_DIR/$$CI_CONTAINER.$$CONTAINER_EXT" || echo "* ignoring expected 'ctr images import' result"
            $${SUDO} ctr -n k8s.io images tag $$IMAGE_REGISTRY_PREFIX/$$CI_CONTAINER-amd64:"$${CI_VERSION//+/_}" $$IMAGE_REGISTRY_PREFIX/$$CI_CONTAINER:"$${CI_VERSION//+/_}"
            $${SUDO} ctr -n k8s.io images tag $$IMAGE_REGISTRY_PREFIX/$$CI_CONTAINER-amd64:"$${CI_VERSION//+/_}" gcr.io/k8s-staging-ci-images/$$CI_CONTAINER:"$${CI_VERSION//+/_}"
          done
        fi
        systemctl restart kubelet
      fi
      echo "* checking binary versions"
      echo "ctr version: " $(ctr version)
      echo "kubeadm version: " $(kubeadm version -o=short)
      echo "kubectl version: " $(kubectl version --client=true)
      echo "kubelet version: " $(kubelet --version)
      echo "$$LINE_SEPARATOR"
    owner: root:root
    path: /tmp/kubeadm-bootstrap.sh
    permissions: "0744"
  - contentFrom:
      secret:
        key: worker-node-azure.json
        name: ${CLUSTER_NAME}-mp-0-azure-json
    owner: root:root
    path: /etc/kubernetes/azure.json
    permissions: "0644"
  joinConfiguration:
    nodeRegistration:
      kubeletExtraArgs:
        azure-container-registry-config: /etc/kubernetes/azure.json
        cloud-provider: external
      name: '{{ ds.meta_data["local_hostname"] }}'
  preKubeadmCommands:
  - bash -c /tmp/kubeadm-bootstrap.sh
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterIdentity
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move-hierarchy: "true"
  name: ${CLUSTER_IDENTITY_NAME}
  namespace: default
spec:
  allowedNamespaces: {}
  clientID: ${AZURE_CLIENT_ID_USER_ASSIGNED_IDENTITY}
  tenantID: ${AZURE_TENANT_ID}
  type: WorkloadIdentity
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachinePool
metadata:
  name: ${CLUSTER_NAME}-mp-win
  namespace: default
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WINDOWS_WORKER_MACHINE_COUNT:-0}
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfig
          name: ${CLUSTER_NAME}-mp-win
      clusterName: ${CLUSTER_NAME}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachinePool
        name: ${CLUSTER_NAME}-mp-win
      version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachinePool
metadata:
  annotations:
    runtime: containerd
  name: ${CLUSTER_NAME}-mp-win
  namespace: default
spec:
  identity: UserAssigned
  userAssignedIdentities:
  - providerID: /subscriptions/${AZURE_SUBSCRIPTION_ID}/resourceGroups/${CI_RG}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${USER_IDENTITY}
  location: ${AZURE_LOCATION}
  orchestrationMode: ${ORCHESTRATION_MODE:=Uniform}
  template:
    image:
      marketplace:
        offer: capi-windows
        publisher: cncf-upstream
        sku: ${WINDOWS_SERVER_VERSION:=windows-2019}-containerd-gen1
        version: latest
    osDisk:
      diskSizeGB: 30
      managedDisk:
        storageAccountType: Premium_LRS
      osType: Windows
    sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
    vmSize: ${AZURE_NODE_MACHINE_TYPE}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfig
metadata:
  name: ${CLUSTER_NAME}-mp-win
  namespace: default
spec:
  files:
  - contentFrom:
      secret:
        key: worker-node-azure.json
        name: ${CLUSTER_NAME}-mp-win-azure-json
    owner: root:root
    path: c:/k/azure.json
    permissions: "0644"
  - content: Add-MpPreference -ExclusionProcess C:/opt/cni/bin/calico.exe
    path: C:/defender-exclude-calico.ps1
    permissions: "0744"
  - content: |
      Stop-Service kubelet -Force
      $$CI_VERSION="${CI_VERSION}"
      if($$CI_VERSION -ne "")
      {
        $$binaries=@("kubeadm", "kubectl", "kubelet", "kube-proxy")
        $$ci_url="https://storage.googleapis.com/k8s-release-dev/ci/$$CI_VERSION/bin/windows/amd64"
        foreach ( $$binary in $$binaries )
        {
          echo "downloading binary: $$ci_url/$$binary.exe"
          curl.exe --retry 10 --retry-delay 5 "$$ci_url/$$binary.exe" --output "c:/k/$$binary.exe"
        }
      }
      # Tag it to the ci version.  The image knows how to use the copy locally with the configmap
      # that is applied at at this stage (windows-kubeproxy-ci.yaml)
      ctr.exe -n k8s.io images pull docker.io/sigwindowstools/kube-proxy:v1.23.1-calico-hostprocess
      ctr.exe -n k8s.io images tag docker.io/sigwindowstools/kube-proxy:v1.23.1-calico-hostprocess "docker.io/sigwindowstools/kube-proxy:${CI_VERSION/+/_}-calico-hostprocess"
      kubeadm.exe version -o=short
      kubectl.exe version --client=true --short=true
      kubelet.exe --version
    path: C:/replace-k8s-binaries.ps1
    permissions: "0744"
  joinConfiguration:
    nodeRegistration:
      criSocket: npipe:////./pipe/containerd-containerd
      kubeletExtraArgs:
        azure-container-registry-config: c:/k/azure.json
        cloud-provider: external
        pod-infra-container-image: mcr.microsoft.com/oss/kubernetes/pause:3.4.1
      name: '{{ ds.meta_data["local_hostname"] }}'
  postKubeadmCommands:
  - nssm set kubelet start SERVICE_AUTO_START
  - powershell C:/defender-exclude-calico.ps1
  preKubeadmCommands:
  - powershell c:/create-external-network.ps1
  - powershell C:/replace-k8s-binaries.ps1
  users:
  - groups: Administrators
    name: capi
    sshAuthorizedKeys:
    - ${AZURE_SSH_PUBLIC_KEY:=""}
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: ${CLUSTER_NAME}-calico-windows
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      cni-windows: ${CLUSTER_NAME}-calico
  resources:
  - kind: ConfigMap
    name: cni-${CLUSTER_NAME}-calico-windows
  strategy: ApplyOnce
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: csi-proxy
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      csi-proxy: enabled
  resources:
  - kind: ConfigMap
    name: csi-proxy-addon
  strategy: ApplyOnce
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: containerd-logger-${CLUSTER_NAME}
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      containerd-logger: enabled
  resources:
  - kind: ConfigMap
    name: containerd-logger-${CLUSTER_NAME}
  strategy: ApplyOnce
---
apiVersion: v1
data:
  kube-proxy-patch: |-
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: windows-kubeproxy-ci
      namespace: kube-system
    data:
      KUBEPROXY_PATH: "c:/k/kube-proxy.exe"
  proxy: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        k8s-app: kube-proxy
      name: kube-proxy-windows
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          k8s-app: kube-proxy-windows
      template:
        metadata:
          labels:
            k8s-app: kube-proxy-windows
        spec:
          serviceAccountName: kube-proxy
          securityContext:
            windowsOptions:
              hostProcess: true
              runAsUserName: "NT AUTHORITY\\system"
          hostNetwork: true
          containers:
          - image: sigwindowstools/kube-proxy:${KUBERNETES_VERSION/+/_}-calico-hostprocess
            args: ["$env:CONTAINER_SANDBOX_MOUNT_POINT/kube-proxy/start.ps1"]
            workingDir: "$env:CONTAINER_SANDBOX_MOUNT_POINT/kube-proxy/"
            name: kube-proxy
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KUBEPROXY_PATH
              valueFrom:
                configMapKeyRef:
                  name: windows-kubeproxy-ci
                  key: KUBEPROXY_PATH
                  optional: true
            volumeMounts:
            - mountPath: /var/lib/kube-proxy
              name: kube-proxy
          nodeSelector:
            kubernetes.io/os: windows
          tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - operator: Exists
          volumes:
          - configMap:
              name: kube-proxy
            name: kube-proxy
      updateStrategy:
        type: RollingUpdate
  windows-cni: "# strictAffinity required for windows\napiVersion: crd.projectcalico.org/v1\nkind: IPAMConfig\nmetadata:\n  name: default\nspec:\n  autoAllocateBlocks: true\n  strictAffinity: true\n---\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: calico-static-rules\n  namespace: calico-system\n  labels:\n    tier: node\n    app: calico\ndata:\n  static-rules.json: |\n    {\n      \"Provider\": \"azure\",\n      \"Version\": \"0.1\",\n      \"Rules\": [\n        {\n          \"Name\": \"EndpointPolicy\",\n          \"Rule\": {\n              \"Id\": \"wireserver\",\n              \"Type\": \"ACL\",\n              \"Protocol\": 6,\n              \"Action\": \"Block\",\n              \"Direction\": \"Out\",\n              \"RemoteAddresses\": \"168.63.129.16/32\",\n              \"RemotePorts\": \"80\",\n              \"Priority\": 200,\n              \"RuleType\": \"Switch\"\n            }\n          }\n      ]\n    } \n---\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: calico-config-windows\n  namespace: calico-system\n  labels:\n    tier: node\n    app: calico\ndata:\n  veth_mtu: \"1350\"\n  \n  cni_network_config: |\n    {\n      \"name\": \"Calico\",\n      \"cniVersion\": \"0.3.1\",\n      \"plugins\": [\n        {\n          \"windows_use_single_network\": true,\n          \"type\": \"calico\",\n          \"mode\": \"vxlan\",\n          \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n          \"nodename_file_optional\": true,\n          \"log_file_path\": \"c:/cni.log\",\n          \"log_level\": \"debug\",\n\n          \"vxlan_mac_prefix\": \"0E-2A\",\n          \"vxlan_vni\": 4096,\n          \"mtu\": __CNI_MTU__,\n          \"policy\": {\n            \"type\": \"k8s\"\n          },\n\n          \"log_level\": \"info\",\n\n          \"capabilities\": {\"dns\": true},\n          \"DNS\":  {\n            \"Search\":  [\n              \"svc.cluster.local\"\n            ]\n          },\n\n          \"datastore_type\": \"kubernetes\",\n\n          \"kubernetes\": {\n            \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n          },\n\n          \"ipam\": {\n            \"type\": \"calico-ipam\",\n            \"subnet\": \"usePodCidr\"\n          },\n\n          \"policies\":  [\n            {\n              \"Name\":  \"EndpointPolicy\",\n              \"Value\":  {\n                \"Type\":  \"OutBoundNAT\",\n                \"ExceptionList\":  [\n                  \"__K8S_SERVICE_CIDR__\"\n                ]\n              }\n            },\n            {\n              \"Name\":  \"EndpointPolicy\",\n              \"Value\":  {\n                \"Type\":  \"SDNROUTE\",\n                \"DestinationPrefix\":  \"__K8S_SERVICE_CIDR__\",\n                \"NeedEncap\":  true\n              }\n            }\n          ]\n        }\n      ]\n\n    }\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: calico-node-windows\n  labels:\n    tier: node\n    app: calico\n  namespace: calico-system\nspec:\n  selector:\n    matchLabels:\n\
    \      app: calico\n  template:\n    metadata:\n      labels:\n        tier: node\n        app: calico\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                  - key: kubernetes.io/os\n                    operator: In\n                    values:\n                      - windows\n                  - key: kubernetes.io/arch\n                    operator: In\n                    values:\n                      - amd64\n      securityContext:\n        windowsOptions:\n          hostProcess: true\n          runAsUserName: \"NT AUTHORITY\\\\system\"\n      hostNetwork: true\n      serviceAccountName: calico-node\n      tolerations:\n      - operator: Exists\n        effect: NoSchedule\n        # Mark the pod as a critical add-on for rescheduling.\n      - key: CriticalAddonsOnly\n        operator: Exists\n      - effect: NoExecute\n        operator: Exists\n      initContainers:\n        # This container installs the CNI binaries\n        # and CNI network config file on each node.\n        - name: install-cni\n          image: sigwindowstools/calico-install:v3.24.5-hostprocess\n          args: [\"$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/install.ps1\"]\n          imagePullPolicy: Always\n          env:\n            # Name of the CNI config file to create.\n            - name: CNI_CONF_NAME\n              value: \"10-calico.conflist\"\n            # The CNI network config to install on each node.\n            - name: CNI_NETWORK_CONFIG\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config-windows\n                  key: cni_network_config\n            # Set the hostname based on the k8s node name.\n            - name: KUBERNETES_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            # CNI MTU Config variable\n            - name: CNI_MTU\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config-windows\n                  key: veth_mtu\n  # Prevents the container from sleeping forever.\n            - name: SLEEP\n              value: \"false\"\n            - name: K8S_SERVICE_CIDR\n              value: \"10.96.0.0/12\"\n          volumeMounts:\n            - mountPath: /host/opt/cni/bin\n              name: cni-bin-dir\n            - mountPath: /host/etc/cni/net.d\n              name: cni-net-dir\n            - name: kubeadm-config\n              mountPath: /etc/kubeadm-config/\n          securityContext:\n            windowsOptions:\n              hostProcess: true\n              runAsUserName: \"NT AUTHORITY\\\\system\"\n      containers:\n      - name: calico-node-startup\n        image: sigwindowstools/calico-node:v3.24.5-hostprocess\n        args: [\"$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/node-service.ps1\"]\n        workingDir: \"$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/\"\
    \n        imagePullPolicy: Always\n        volumeMounts:\n        - name: calico-config-windows\n          mountPath: /etc/kube-calico-windows/\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.name\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: CNI_IPAM_TYPE\n          value: \"calico-ipam\"\n        - name: CALICO_NETWORKING_BACKEND\n          value: \"vxlan\"\n        - name: KUBECONFIG\n          value: \"C:/etc/cni/net.d/calico-kubeconfig\"\n        - name: VXLAN_VNI\n          value: \"4096\"\n      - name: calico-node-felix\n        image: sigwindowstools/calico-node:v3.24.5-hostprocess\n        args: [\"$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/felix-service.ps1\"]\n        imagePullPolicy: Always\n        workingDir: \"$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/\"\n        volumeMounts:\n        - name: calico-config-windows\n          mountPath: /etc/kube-calico-windows/\n        - name: calico-static-rules\n          mountPath: /calico/static-rules.json\n          subPath: static-rules.json\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.name\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: VXLAN_VNI\n          value: \"4096\"\n        - name: KUBECONFIG\n          value: \"C:/etc/cni/net.d/calico-kubeconfig\"\n      volumes:\n      - name: calico-config-windows\n        configMap:\n          name: calico-config-windows\n      - name: calico-static-rules\n        configMap:\n          name: calico-static-rules\n      # Used to install CNI.\n      - name: cni-bin-dir\n        hostPath:\n          path: /opt/cni/bin\n      - name: cni-net-dir\n        hostPath:\n          path: /etc/cni/net.d\n      - name: kubeadm-config\n        configMap:\n          name: kubeadm-config\n"
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: cni-${CLUSTER_NAME}-calico-windows
  namespace: default
---
apiVersion: v1
data:
  csi-proxy: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        k8s-app: csi-proxy
      name: csi-proxy
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          k8s-app: csi-proxy
      template:
        metadata:
          labels:
            k8s-app: csi-proxy
        spec:
          nodeSelector:
            "kubernetes.io/os": windows
          securityContext:
            windowsOptions:
              hostProcess: true
              runAsUserName: "NT AUTHORITY\\SYSTEM"
          hostNetwork: true
          containers:
            - name: csi-proxy
              image: ghcr.io/kubernetes-sigs/sig-windows/csi-proxy:v1.0.2
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: csi-proxy-addon
  namespace: default
---
apiVersion: v1
data:
  containerd-windows-logger: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        k8s-app: containerd-logger
      name: containerd-logger
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          k8s-app: containerd-logger
      template:
        metadata:
          labels:
            k8s-app: containerd-logger
        spec:
          securityContext:
            windowsOptions:
              hostProcess: true
              runAsUserName: "NT AUTHORITY\\system"
          hostNetwork: true
          containers:
          - image: ghcr.io/kubernetes-sigs/sig-windows/eventflow-logger:v0.1.0
            args: [ "config.json" ]
            name: containerd-logger
            imagePullPolicy: Always
            volumeMounts:
            - name: containerd-logger-config
              mountPath: /config.json
              subPath: config.json
          nodeSelector:
            kubernetes.io/os: windows
          tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - operator: Exists
          volumes:
          - configMap:
              name: containerd-logger-config
            name: containerd-logger-config
      updateStrategy:
        type: RollingUpdate
    ---
    kind: ConfigMap
    apiVersion: v1
    metadata:
      name: containerd-logger-config
      namespace: kube-system
    data:
      config.json: |
        {
          "inputs": [
            {
              "type": "ETW",
              "sessionNamePrefix": "containerd",
              "cleanupOldSessions": true,
              "reuseExistingSession": true,
              "providers": [
                {
                  "providerName": "Microsoft.Virtualization.RunHCS",
                  "providerGuid": "0B52781F-B24D-5685-DDF6-69830ED40EC3",
                  "level": "Verbose"
                },
                {
                  "providerName": "ContainerD",
                  "providerGuid": "2acb92c0-eb9b-571a-69cf-8f3410f383ad",
                  "level": "Verbose"
                }
              ]
            }
          ],
          "filters": [
            {
                "type": "drop",
                "include": "ProviderName == Microsoft.Virtualization.RunHCS && name == Stats && hasnoproperty error"
            },
            {
                "type": "drop",
                "include": "ProviderName == Microsoft.Virtualization.RunHCS && name == hcsshim::LayerID && hasnoproperty error"
            },
            {
                "type": "drop",
                "include": "ProviderName == Microsoft.Virtualization.RunHCS && name == hcsshim::NameToGuid && hasnoproperty error"
            },
            {
                "type": "drop",
                "include": "ProviderName == Microsoft.Virtualization.RunHCS && name == containerd.task.v2.Task.Stats && hasnoproperty error"
            },
            {
                "type": "drop",
                "include": "ProviderName == Microsoft.Virtualization.RunHCS && name == containerd.task.v2.Task.State && hasnoproperty error"
            },
            {
                "type": "drop",
                "include": "ProviderName == Microsoft.Virtualization.RunHCS && name == HcsGetProcessProperties && hasnoproperty error"
            },
            {
                "type": "drop",
                "include": "ProviderName == Microsoft.Virtualization.RunHCS && name == HcsGetComputeSystemProperties && hasnoproperty error"
            }
          ],
          "outputs": [
            {
              "type": "StdOutput"
            }
          ],
          "schemaVersion": "2016-08-11"
        }
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: containerd-logger-${CLUSTER_NAME}
  namespace: default
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: metrics-server-${CLUSTER_NAME}
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      metrics-server: enabled
  resources:
  - kind: ConfigMap
    name: metrics-server-${CLUSTER_NAME}
  strategy: ApplyOnce
---
apiVersion: v1
data:
  metrics-server: |
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        k8s-app: metrics-server
      name: metrics-server
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        k8s-app: metrics-server
        rbac.authorization.k8s.io/aggregate-to-admin: "true"
        rbac.authorization.k8s.io/aggregate-to-edit: "true"
        rbac.authorization.k8s.io/aggregate-to-view: "true"
      name: system:aggregated-metrics-reader
    rules:
    - apiGroups:
      - metrics.k8s.io
      resources:
      - pods
      - nodes
      verbs:
      - get
      - list
      - watch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        k8s-app: metrics-server
      name: system:metrics-server
    rules:
    - apiGroups:
      - ""
      resources:
      - pods
      - nodes
      - nodes/stats
      - namespaces
      - configmaps
      verbs:
      - get
      - list
      - watch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      labels:
        k8s-app: metrics-server
      name: metrics-server-auth-reader
      namespace: kube-system
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: extension-apiserver-authentication-reader
    subjects:
    - kind: ServiceAccount
      name: metrics-server
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        k8s-app: metrics-server
      name: metrics-server:system:auth-delegator
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:auth-delegator
    subjects:
    - kind: ServiceAccount
      name: metrics-server
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        k8s-app: metrics-server
      name: system:metrics-server
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:metrics-server
    subjects:
    - kind: ServiceAccount
      name: metrics-server
      namespace: kube-system
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        k8s-app: metrics-server
      name: metrics-server
      namespace: kube-system
    spec:
      ports:
      - name: https
        port: 443
        protocol: TCP
        targetPort: https
      selector:
        k8s-app: metrics-server
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        k8s-app: metrics-server
      name: metrics-server
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          k8s-app: metrics-server
      strategy:
        rollingUpdate:
          maxUnavailable: 0
      template:
        metadata:
          labels:
            k8s-app: metrics-server
        spec:
          containers:
          - args:
            - --cert-dir=/tmp
            - --secure-port=4443
            - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
            - --kubelet-use-node-status-port
            - --metric-resolution=15s
            - --kubelet-insecure-tls
            image: registry.k8s.io/metrics-server/metrics-server:v0.5.2
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /livez
                port: https
                scheme: HTTPS
              periodSeconds: 10
            name: metrics-server
            ports:
            - containerPort: 4443
              name: https
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /readyz
                port: https
                scheme: HTTPS
              initialDelaySeconds: 20
              periodSeconds: 10
            resources:
              requests:
                cpu: 100m
                memory: 200Mi
            securityContext:
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 1000
            volumeMounts:
            - mountPath: /tmp
              name: tmp-dir
          nodeSelector:
            kubernetes.io/os: linux
          priorityClassName: system-cluster-critical
          serviceAccountName: metrics-server
          tolerations:
          - effect: NoSchedule
            key: node-role.kubernetes.io/master
            operator: Exists
          - effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
            operator: Exists
          volumes:
          - emptyDir: {}
            name: tmp-dir
    ---
    apiVersion: apiregistration.k8s.io/v1
    kind: APIService
    metadata:
      labels:
        k8s-app: metrics-server
      name: v1beta1.metrics.k8s.io
    spec:
      group: metrics.k8s.io
      groupPriorityMinimum: 100
      insecureSkipTLSVerify: true
      service:
        name: metrics-server
        namespace: kube-system
      version: v1beta1
      versionPriority: 100
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: metrics-server-${CLUSTER_NAME}
  namespace: default
---
apiVersion: addons.cluster.x-k8s.io/v1alpha1
kind: HelmChartProxy
metadata:
  name: calico
  namespace: default
spec:
  chartName: tigera-operator
  clusterSelector:
    matchLabels:
      cni: calico
  namespace: tigera-operator
  releaseName: projectcalico
  repoURL: https://docs.tigera.io/calico/charts
  valuesTemplate: |-
    installation:
      cni:
        type: Calico
      calicoNetwork:
        bgp: Disabled
        mtu: 1350
        ipPools:
        ipPools:{{range $i, $cidr := .Cluster.spec.clusterNetwork.pods.cidrBlocks }}
        - cidr: {{ $cidr }}
          encapsulation: VXLAN{{end}}
---
apiVersion: addons.cluster.x-k8s.io/v1alpha1
kind: HelmChartProxy
metadata:
  name: cloud-provider-azure-chart
  namespace: default
spec:
  chartName: cloud-provider-azure
  clusterSelector:
    matchLabels:
      cloud-provider: azure
  releaseName: cloud-provider-azure-oot
  repoURL: https://raw.githubusercontent.com/kubernetes-sigs/cloud-provider-azure/master/helm/repo
  valuesTemplate: |-
    infra:
      clusterName: {{ .Cluster.metadata.name }}
    cloudControllerManager:
      clusterCIDR: {{ .Cluster.spec.clusterNetwork.pods.cidrBlocks | join "," }}
      logVerbosity: 4
---
apiVersion: addons.cluster.x-k8s.io/v1alpha1
kind: HelmChartProxy
metadata:
  name: cloud-provider-azure-chart-ci
  namespace: default
spec:
  chartName: cloud-provider-azure
  clusterSelector:
    matchLabels:
      cloud-provider: azure-ci
  releaseName: cloud-provider-azure-oot
  repoURL: https://raw.githubusercontent.com/kubernetes-sigs/cloud-provider-azure/master/helm/repo
  valuesTemplate: |-
    infra:
      clusterName: {{ .Cluster.metadata.name }}
    cloudControllerManager:
      cloudConfig: ${CLOUD_CONFIG:-"/etc/kubernetes/azure.json"}
      cloudConfigSecretName: ${CONFIG_SECRET_NAME:-""}
      clusterCIDR: {{ .Cluster.spec.clusterNetwork.pods.cidrBlocks | join "," }}
      imageName: "${CCM_IMAGE_NAME:-""}"
      imageRepository: "${IMAGE_REGISTRY:-""}"
      imageTag: "${IMAGE_TAG_CCM:-""}"
      logVerbosity: ${CCM_LOG_VERBOSITY:-4}
      replicas: ${CCM_COUNT:-1}
      enableDynamicReloading: ${ENABLE_DYNAMIC_RELOADING:-false}
    cloudNodeManager:
      imageName: "${CNM_IMAGE_NAME:-""}"
      imageRepository: "${IMAGE_REGISTRY:-""}"
      imageTag: "${IMAGE_TAG_CNM:-""}"
